package ru.mirea.medlib.network.dto

import com.squareup.moshi.JsonClass
import ru.mirea.medlib.database.MediaEntity
import ru.mirea.medlib.domain.FilmCategory

@JsonClass(generateAdapter = true)
data class FilmDetailsDto(
    val kinopoiskId: Long,
    val imdbId: String?,
    val nameRu: String?,
    val nameEn: String?,
    val nameOriginal: String?,
    val posterUrl: String?,
    val posterUrlPreview: String,
    val coverUrl: String?,
    val logoUrl: String?,
    val reviewsCount: Long,
    val ratingGoodReview: Double?,
    val ratingGoodReviewVoteCount: Long,
    val ratingKinopoisk: Double?,
    val ratingKinopoiskVoteCount: Long,
    val ratingImdb: Double,
    val ratingImdbVoteCount: Long,
    val ratingFilmCritics: Double?,
    val ratingFilmCriticsVoteCount: Long,
    val ratingAwait: Double?,
    val ratingAwaitCount: Long,
    val ratingRfCritics: Long?,
    val ratingRfCriticsVoteCount: Long,
    val webUrl: String,
    val year: Long,
    val filmLength: Long?,
    val slogan: String?,
    val description: String?,
    val shortDescription: String?,
    val editorAnnotation: String?,
    val isTicketsAvailable: Boolean,
    val productionStatus: String?,
    val type: FilmCategory,
    val ratingMpaa: String?,
    val ratingAgeLimits: String?,
    val countries: List<Country>,
    val genres: List<Genre>,
    val startYear: Long?,
    val endYear: Long?,
    val serial: Boolean,
    val shortFilm: Boolean,
    val completed: Boolean,
    val hasImax: Boolean,
    val has3D: Boolean,
    val lastSync: String,
)

fun FilmDetailsDto.asDatabaseModel(): MediaEntity = MediaEntity(
    kinopoiskId = kinopoiskId,
    imdbId = imdbId,
    nameRu = nameRu,
    nameEn = nameEn,
    nameOriginal = nameOriginal,
    posterUrl = posterUrl,
    posterUrlPreview = posterUrlPreview,
    ratingKinopoisk = ratingKinopoisk,
    ratingKinopoiskVoteCount = ratingKinopoiskVoteCount,
    ratingImdb = ratingImdb,
    ratingImdbVoteCount = ratingImdbVoteCount,
    webUrl = webUrl,
    year = year,
    filmLength = filmLength,
    slogan = slogan,
    description = description,
    shortDescription = shortDescription,
    editorAnnotation = editorAnnotation,
    type = type,
    ratingAgeLimits = ratingAgeLimits,
    countries = countries,
    genres = genres,
    startYear = startYear,
    endYear = endYear,
    serial = serial,
    shortFilm = shortFilm
)
